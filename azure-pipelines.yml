# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: prebuild
  jobs:
  - job: 'code_check'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    continueOnError: true

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        python -m compileall .
      displayName: 'Compile solution'

    - script: |
        python -m pip install flake8
        flake8 ./pliptv
      displayName: 'Run lint tests'

  - job: 'type_check'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    continueOnError: true
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'
    - script: |
        python -m pip install mypy
        make typecheck
      displayName: 'Run typecheck'

- stage: test
  jobs:
  - job: 'tests'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    displayName: Tests

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        pip install codecov
        pip install -r requirements.txt -r requirements-dev.txt
        coverage erase
        coverage run -m unittest discover -p '*_test.py'
        coverage report -m
        coverage html
        codecov --token $CODECOV_TOKEN
      displayName: 'Test with pytest && publish code coverage'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
        PL: $(PL)
        EPG_INDEX_URL: $(EPG_INDEX_URL)

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

    - script: |
        pip install -r requirements.txt -r requirements-dev.txt
        python -m xmlrunner discover -p '*_test.py' -o ./build/reports
      env:
        PL: $(PL)
        EPG_INDEX_URL: $(EPG_INDEX_URL)
      displayName: 'Unittests generate reports'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/build/reports/TEST-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

- stage: Package_test
  jobs:
  - job: 'SettingPythonVersion'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    displayName: 'Setting Python Version'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        apt-get update -qy
        apt-get install -y python-dev python-pip
        pip install --user --upgrade setuptools wheel
        pip install -r requirements.txt
        python setup.py sdist bdist_wheel
      displayName: 'Packaging'
    - task: TwineAuthenticate@0
      inputs:
        pythonUploadServiceConnection: 'test_pypi'
    - script: |
        pip install --user --upgrade twine
        twine upload -r xpl/test_pypi --config-file $(PYPIRC_PATH) dist/*
#        python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
      displayName: 'Publishing package'

#      TODO: Publish to PYPY (not staging) with an approver
#      TODO: Bumpversion with git tags

