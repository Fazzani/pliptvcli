# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: prebuild
  jobs:
  - job: 'code_check'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    continueOnError: true

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        python -m compileall .
      displayName: 'Compile solution'

    - script: |
        python -m pip install flake8
        flake8 ./pliptv
      displayName: 'Run lint tests'

  - job: 'type_check'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    continueOnError: true
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'
    - script: |
        python -m pip install mypy
        make typecheck
      displayName: 'Run typecheck'

- stage: test
  jobs:
  - job: 'tests'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    displayName: Tests

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        pip install codecov
        pip install -r requirements.txt -r requirements-dev.txt
        coverage erase
        coverage run -m unittest discover -p '*_test.py'
        coverage report -m
        coverage html
        codecov --token $CODECOV_TOKEN
      displayName: 'Test with pytest && publish code coverage'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
        PL: $(PL)
        EPG_INDEX_URL: $(EPG_INDEX_URL)

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

    - script: |
        pip install -r requirements.txt -r requirements-dev.txt
        python -m xmlrunner discover -p '*_test.py' -o ./build/reports
      env:
        PL: $(PL)
        EPG_INDEX_URL: $(EPG_INDEX_URL)
      displayName: 'Unittests generate reports'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/build/reports/TEST-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'

- stage: Package_test
  jobs:
  - job: 'SettingPythonVersion'
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        Python37:
          python.version: '3.7'
    displayName: 'Setting Python Version'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        targetType: 'inline'

    - script: |
        pip install twine
        pip install wheel
        python setup.py sdist bdist_wheel
      displayName: 'Tools setup'

    - script: |
        python setup.py sdist bdist_wheel
      displayName: 'Packaging'

    - task: TwineAuthenticate@1
      displayName: 'Twine Authenticate'
      inputs:
        pythonUploadServiceConnection: test_pypi

    - script: |
        python -m twine upload --verbose -r "test_pypi" --config-file $(PYPIRC_PATH) dist/*
#        python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
      displayName: 'Publishing package'

  - stage: PublishProd
    jobs:
      # track deployments on the environment
      - deployment: DeployPackage
        pool:
          vmImage: 'Ubuntu-16.04'
        environment: 'Pypi_repo_prod'
        strategy:
          # default deployment strategy
          runOnce:
            deploy:
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: '$(python.version)'
                    targetType: 'inline'

                - script: |
                    pip install twine
                    pip install wheel
                    python setup.py sdist bdist_wheel
                  displayName: 'Tools setup'

                - script: |
                    python setup.py sdist bdist_wheel
                  displayName: 'Packaging'

                - task: TwineAuthenticate@1
                  displayName: 'Twine Authenticate'
                  inputs:
                    pythonUploadServiceConnection: prod_pypi

                - script: |
                    python -m twine upload --verbose -r "prod_pypi" --config-file $(PYPIRC_PATH) dist/*
                  #        python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*
                  displayName: 'Publishing package'

#      TODO: Add approver to prod env
#      TODO: Create pipeline template for publishing pypi package
#      TODO: Bumpversion with git tags

